buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}


def kodiak_docker_version = 'UNKNOWN'
if (hasProperty('docker_version')) {
    kodiak_docker_version = docker_version
}
def kodiak_docker_name = 'kodiak'
if (hasProperty('docker_name')) {
    kodiak_docker_name = docker_name
}

def base_image = 'docker.montagu.dide.ic.ac.uk:5000/openjdk-libsodium:master'
if (hasProperty('libsodium_image')) {
    base_image = libsodium_image
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'docker'

mainClassName = "org.vaccineimpact.kodiak.MainKt"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "com.google.code.gson:gson:2.2.4"
    compile "org.slf4j:slf4j-log4j12:1.7.5"

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
    testCompile "org.assertj:assertj-core:3.9.1"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

distDocker {
    baseImage = base_image
    dependsOn = [build]
    push = true
    tag = kodiak_docker_name
    tagVersion = kodiak_docker_version
}

task copyDockerProperties(type: Copy) {
    from 'src/main/resources/docker'
    into 'src/main/resources'
    outputs.upToDateWhen { false }
}

task copyDevProperties(type: Copy) {
    from 'src/main/resources/dev'
    into 'src/main/resources'
    outputs.upToDateWhen { false }
}

if (System.getProperty("prod")) {
    processResources.dependsOn copyDockerProperties
} else {
    processResources.dependsOn copyDevProperties
}

// this method creates a string that can be used by Eval
static def setCommandLineArguments(commandLineArgs) {

    def arguments = commandLineArgs.tokenize()
    def cla = "["
    arguments.each {
        cla += "'" + "${it}" + "',"
    }
    return cla.substring(0, cla.lastIndexOf(',')) + "]"
}

// usage: ./gradlew runAppLocally -PcommandLineArgs="init target1"
task runAppLocally(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = mainClassName
    if (project.hasProperty("commandLineArgs") ) {
        args Eval.me(setCommandLineArguments(commandLineArgs))
    }
}
